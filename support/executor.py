import logging

from support.calculator import BalanceCalculator


class TradeExecutor:
    def __init__(self, db, calculator: BalanceCalculator):
        self.db = db
        self.last_trades = {}
        self.calculator = calculator

    async def execute_trades(self, predicates, market_data: dict):
        actions = []

        for predicate in predicates:
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥–∏–∫–∞—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∏ —Ç–∏–∫–µ—Ä–∞
            parts = predicate.split()  # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
            action = parts[0]  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å üìà BUY –∏–ª–∏ üìâ SELL
            ticker = parts[2]  # –°–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥ –∞–∫—Ü–∏–∏
            instrument = await self.db.instruments.find_one({'ticker': ticker})
            if action in ['üìà', 'üìâ']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ä—É
                if ticker not in self.last_trades or self._can_trade_again(instrument['uid']):
                    price = market_data.get(ticker, {}).get('price', 0)  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞
                    amount = await self._calculate_amount(action, instrument['uid'], price)
                    if amount > 0:
                        self.last_trades[ticker] = self.get_current_time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                        actions.append(f"{action} {amount} of {ticker}")
                        logging.warning(f"{action} {amount} of {ticker}")
                    else:
                        logging.warning(f"No available balance to {action} {ticker}")

        return actions

    def _can_trade_again(self, instrument_uid):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        time_elapsed = self.get_current_time() - self.last_trades[instrument_uid]
        return time_elapsed > 30  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    async def _calculate_amount(self, action, instrument_uid, price):
        # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏
        if action == 'üìà':
            available_money = await self.calculator.get_money()  # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
            lot_size = await self.calculator.get_lot_quantity(instrument_uid)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –≤ –ª–æ—Ç–µ
            max_affordable_lots = available_money // (
                price * lot_size
            )  # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ª–æ—Ç–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–≤–∞—Ç–∏—Ç —Å—Ä–µ–¥—Å—Ç–≤
            return int(max_affordable_lots * lot_size)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –∫ –ø–æ–∫—É–ø–∫–µ
        elif action == 'üìâ':
            securities = await self.calculator.db.find_one()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            for security in securities['securities']:
                if security['instrument_uid'] == instrument_uid:
                    return security['balance']  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
        return 0  # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0

    @staticmethod
    def get_current_time():
        import time

        return int(time.time())
