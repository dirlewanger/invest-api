import asyncio
import logging
from api.account import get_account_positions, get_accounts
from api.instrument import get_instrument_by_id
from utils import get_account_id


class TradingStrategy:
    def __init__(self, db, forecast_results, sl, tp, balance):
        self.db = db
        self.forecast_results = forecast_results
        self.sl = sl
        self.tp = tp
        self.balance = balance
        self.lots = None
        self.price = None
        self.pending = False

    async def get_last_price(self, ticker):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–ª—è —Ç–∏–∫–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        record = await self.db.market_data.find_one(
            {"marketData." + ticker: {"$exists": True}}, sort=[("_id", -1)], projection={"marketData." + ticker: 1}
        )
        if record:
            return record['marketData'][ticker]['price']
        return None

    async def calculate_moving_average(self, ticker, window=10):
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ü–µ–Ω—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π."""
        cursor = self.db.market_data.find(
            {"marketData." + ticker: {"$exists": True}},
            projection={"marketData." + ticker + ".price": 1},
            sort=[("_id", -1)],
            limit=window,
        )
        prices = [record['marketData'][ticker]['price'] for record in await cursor.to_list(length=window)]
        if prices:
            return sum(prices) / len(prices)
        return None

    async def calculate_rsi(self, ticker, periods=14):
        """–í—ã—á–∏—Å–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã (RSI)."""
        cursor = self.db.market_data.find(
            {"marketData." + ticker: {"$exists": True}},
            projection={"marketData." + ticker + ".price": 1},
            sort=[("_id", -1)],
            limit=periods + 1,
        )
        prices = [record['marketData'][ticker]['price'] for record in await cursor.to_list(length=periods + 1)]
        if len(prices) < periods + 1:
            return None

        changes = [prices[i] - prices[i + 1] for i in range(len(prices) - 1)]
        gains = [max(x, 0) for x in changes]
        losses = [abs(min(x, 0)) for x in changes]

        average_gain = sum(gains) / periods
        average_loss = sum(losses) / periods

        if average_loss == 0:
            return 100  # Prevent division by zero; RSI is 100 if the average loss is zero

        rs = average_gain / average_loss
        rsi = 100 - (100 / (1 + rs))
        return rsi

    async def calculate_ema(self, ticker, span=20):
        """–í—ã—á–∏—Å–ª–∏—Ç—å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ (EMA) –¥–ª—è —Ü–µ–Ω—ã."""
        cursor = self.db.market_data.find(
            {"marketData." + ticker: {"$exists": True}},
            projection={"marketData." + ticker + ".price": 1},
            sort=[("_id", -1)],
            limit=span,
        )
        prices = [record['marketData'][ticker]['price'] for record in await cursor.to_list(length=span)]
        if not prices:
            return None

        weights = [2 / (span + 1) * (span - i) / span for i in range(span)]
        ema = sum(p * w for p, w in zip(prices, weights)) / sum(weights)
        return ema

    async def evaluate(self, ticker, instrument_id):
        """–û—Ü–µ–Ω–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        last_price = await self.get_last_price(ticker)
        current_price = await self.get_current_price(ticker)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ema = await self.calculate_ema(ticker, span=20)  # –†–∞—Å—á–µ—Ç EMA
        rsi = await self.calculate_rsi(ticker, periods=14)  # –†–∞—Å—á–µ—Ç RSI

        forecast = self.forecast_results.get(ticker, 0)

        if current_price is None or ema is None:
            return f"üïò [{ticker}] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑–∞, –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω, EMA –∏ RSI
        price_change = (current_price - last_price) / last_price if last_price else 0

        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ EMA –∏ RSI –≤ —Ä–µ—à–µ–Ω–∏–∏
        if forecast > 0.5:  # and current_price > ema and rsi is not None and rsi < 30:  # price_change > self.tp
            lots = await self.calculate_lots(current_price, instrument_id=instrument_id)
            self.lots = lots
            self.price = current_price
            if self.balance > lots * current_price:
                return lots, f"üìâ [{ticker}] –°–¥–µ–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è {lots} –ª–æ—Ç–æ–≤ (—Ü–µ–Ω–∞ –≤—ã—à–µ EMA)"
            else:
                return 0, f"üí° [{ticker}] –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {lots * current_price - self.balance} –Ω–∞ –±–∞–ª–∞–Ω—Å–µ (—Ü–µ–Ω–∞ –≤—ã—à–µ EMA)"
        elif forecast < 0.5:  # and current_price < ema and rsi is not None and rsi > 70:  # price_change < self.sl
            lots = await self.calculate_lots(current_price, instrument_id=instrument_id)
            self.lots = lots
            self.price = current_price
            account_id = await get_account_id(accounts=await get_accounts())
            positions = await get_account_positions(account_id=account_id, money_only=False)
            available = 0
            for security in positions.securities:
                if security.instrument_uid == instrument_id:
                    available = security.balance
                    break
            if available and available > lots:
                return lots, f"üìà [{ticker}] –°–¥–µ–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –¥–ª—è {lots} –ª–æ—Ç–æ–≤ (—Ü–µ–Ω–∞ –Ω–∏–∂–µ EMA)"
            else:
                return 0, f"üí° [{ticker}] —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {lots} –ª–æ—Ç–æ–≤ (—Ü–µ–Ω–∞ –Ω–∏–∂–µ EMA)"
        else:
            return 0, f"üïò [{ticker}] –û–∂–∏–¥–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É —Ä—ã–Ω–∫–∞"

    async def get_current_price(self, ticker):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–∏–∫–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        record = await self.db.market_data.find_one(
            {"marketData." + ticker: {"$exists": True}}, sort=[("_id", -1)], projection={"marketData." + ticker: 1}
        )
        if record:
            return record['marketData'][ticker]['price']
        return None

    async def calculate_lots(self, price, instrument_id):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ü–µ–Ω—ã –ª–æ—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        instrument = await get_instrument_by_id(instrument_id)
        if not instrument or not instrument.lot:
            return 0  # –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0

        lot_multiplier = instrument.lot
        lot_price = price * lot_multiplier  # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ª–æ—Ç–∞

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—É (70% –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞)
        investable_amount = self.balance * 0.7

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å, –Ω–µ –æ–ø—É—Å–∫–∞—è –±–∞–ª–∞–Ω—Å –Ω–∏–∂–µ 30%
        max_lots = int(investable_amount / lot_price)
        return max_lots
